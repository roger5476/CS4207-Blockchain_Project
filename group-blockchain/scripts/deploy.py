import os
import json
from web3 import Web3
from solcx import compile_standard, install_solc

def deploy_contract():
    try:
        print("Starting deployment process...")
        
        # Install specific solc version
        print("Installing solc...")
        install_solc('0.8.0')

        # Read the contract source code
        print("Reading contract source...")
        with open("contracts/StudentEnrollment.sol", "r") as file:
            contract_source = file.read()

        # Compile the contract
        print("Compiling contract...")
        compiled_sol = compile_standard(
            {
                "language": "Solidity",
                "sources": {
                    "StudentEnrollment.sol": {
                        "content": contract_source
                    }
                },
                "settings": {
                    "outputSelection": {
                        "*": {
                            "*": ["abi", "metadata", "evm.bytecode", "evm.sourceMap"]
                        }
                    }
                }
            },
            solc_version="0.8.0"
        )

        # Get bytecode and abi
        print("Extracting bytecode and ABI...")
        bytecode = compiled_sol["contracts"]["StudentEnrollment.sol"]["StudentEnrollment"]["evm"]["bytecode"]["object"]
        abi = compiled_sol["contracts"]["StudentEnrollment.sol"]["StudentEnrollment"]["abi"]

        # Save ABI to a file
        print("Saving ABI...")
        os.makedirs("backend/contracts", exist_ok=True)
        with open("backend/contracts/student_enrollment_abi.json", "w") as file:
            json.dump({"abi": abi}, file)

        # Connect to Ganache
        print("Connecting to Ganache...")
        w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:7545"))
        
        if not w3.is_connected():
            raise Exception("Failed to connect to Ganache")

        # Get deployment account
        accounts = w3.eth.accounts
        deployer_account = accounts[0]
        print(f"Deploying from account: {deployer_account}")

        # Create contract instance
        Contract = w3.eth.contract(abi=abi, bytecode=bytecode)

        # Deploy contract
        print("Deploying contract...")
        tx_hash = Contract.constructor().transact({'from': deployer_account})
        print("Waiting for transaction receipt...")
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        contract_address = tx_receipt.contractAddress
        print(f"Contract deployed at: {contract_address}")
        
        # Save contract address
        with open("backend/contracts/contract_address.txt", "w") as f:
            f.write(contract_address)

        # Generate frontend config
        print("Generating frontend config...")
        config_content = f"""
// Auto-generated by deploy script
const CONFIG = {{
    CONTRACT_ADDRESS: '{contract_address}',
    CONTRACT_ABI: {json.dumps(abi)}
}};
"""
        
        # Save frontend config
        with open("frontend/config.js", "w") as f:
            f.write(config_content)

        print("Deployment completed successfully!")
        return contract_address

    except Exception as e:
        print(f"Deployment error: {str(e)}")
        return None

if __name__ == "__main__":
    deploy_contract() 